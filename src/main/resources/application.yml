registry:
  version: 0.8.2
  user:
    password: ${TAPIR_ADMIN_PASSWORD:default}
  hostname: ${REGISTRY_HOSTNAME:localhost}
  port: ${REGISTRY_PORT:443}
  cors:
    origins: ${CORS_ORIGINS:*}
  auth:
    provider: ${AUTH_PROVIDER}
    endpoint: ${AUTH_ENDPOINT:http://localhost:8089/realms/tapir}
    client-id: ${AUTH_CLIENT_ID:tapir}
    client-secret: ${AUTH_CLIENT_SECRET}
    token-path: ${AUTH_TOKEN_PATH}
    auth-path: ${AUTH_PATH}
    role-source: ${AUTH_ROLE_SOURCE:accesstoken}
    end-session-path: ${END_SESSION_PATH:/protocol/openid-connect/logout}
    token-attributes:
      email: ${AUTH_TOKEN_ATTRIBUTE_EMAIL:email}
      givenName: ${AUTH_TOKEN_ATTRIBUTE_GIVEN_NAME:given_name}
      familyName: ${AUTH_TOKEN_ATTRIBUTE_FAMILY_NAME:family_name}
      preferredUsername: ${AUTH_TOKEN_ATTRIBUTE_PREFERRED_USERNAME:preferred_username}
  proxy:
    enabled: ${PROXY_FORWARDED:false}
    forwarded-header: ${PROXY_FORWARDED_HEADER:X-ORIGINAL-HOST}
  gpg:
    keys:
      - id: D17C807B4156558133A1FB843C7461473EB779BD
        ascii-armor: LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCgptUUlOQkdQbjdIY0JFQURZSnpWaS9CSTZWRUdvdXpjUnd5ZUVucnZsNi82SUtEc3gzZTlTU240eDJrSkNsWEtYCnEyMmJrMFptSUpuRjkyRjZOUm54dTBoVWFPVlorb29URWZvTzFydVNtSjRMWlV4cm4zVEYramlDbHBndWQ0RzIKcGdJTHFXTlpuRnpLN3F6YncvRDVvYTU2YWRwTDRIRFB2UW5lS21qQWxzZlllQUFnNHVNdE1WSFdBbHpSU1VCcQpubDdpOG9NUUJNSmNJM2FLaktsWjhLNXN0bmFqbjZVQjFPMmV0d0ZCZ01BcVNkMXA0RTlHRnFmeC9teUxjZm9UCkEvanpaaElrSy92YnB1RHpwb2c3d3RiamowM3hUZDk5SlNuc2F3WHl2WFRoa2dKWGw4ZFVRVDRQT05HNlg3YW8KVXNZUEk3WnBURkU5RGwzTVF1TjJ5REsrS21JeEM5TTdyTUZFOG5FSFcyRnh4QTdDUHd1RVBmQnNoRFhCS2RoUwpXNlJqVlQyeFlNNUxOSi9VckxLa3BpTU9KTW91NmFSenh2UWJhVjFwZ0JBZzk3bTlFL1FyakkzVWJkTjFIRVg0CmpGZ3Zxc0I3QWVZQ0JGNVpDRGF2aHBHQ3RXUnV3L1g5TnFvdHR0UkMzbUFXTHZOZFBCSHUwZExSc2J6ZWNjZ0wKeHh0dG5YVENQNUhpcGR1Mm5jTytya1I2WkY1ejdPVDFOUnVVMk4xTXpHZUNLQzZ2WVcrVnQrMW9lbTVzd2RlcgozY0FVckZ5RTBJeXIrSzlaT1B1ekJFQjN3cVdrQ3h0WDBqTWxLNGJmcTFWNys2WFhzS1oyTDdxbVZaa3NYbjF5CmFLbC9rM2RPSWpxTUc1TG1keERSM2Q3TytrZWhkYW11aFpBRmdMM1hSQm9rNFk1d2g2TGJ1Vm9kdHdBUkFRQUIKdEZGVVlYQnBjaUJFWlhZZ0tGUm9aU0JyWlhrZ2FYTWdiMjVzZVNCMWMyVmtJR1p2Y2lCMFpYTjBhVzVuSUhCMQpjbkJ2YzJVZ2IyWWdWR0Z3YVhJcElEeDBZWEJwY2kxa1pYWkFjR0ZqYnk1MmF6NkpBbEVFRXdFSUFEc1dJUVRSCmZJQjdRVlpWZ1RPaCs0UThkR0ZIUHJkNXZRVUNZK2ZzZHdJYkF3VUxDUWdIQWdJaUFnWVZDZ2tJQ3dJRUZnSUQKQVFJZUJ3SVhnQUFLQ1JBOGRHRkhQcmQ1dlpPbUVBRFByMm1jWkNlVmVxUVZOZTFmenZhSWFKa094c2ljc0ZIcwpGRjhTalFIcGEreG9zb25ydnprSWh0M0RHUkgvVmVNN0NIeFB3TmxZQ0huMWZsZkdjWCs3eVJURmFWR1BwQ1o2Cmdlb0xyUmgvT3BIU2V4VjZDNjZseC9FUEs3U0lmWmhMR0w0aVdYU0hON2pXeTdoOW94OCtRQnNWSURIT3VNV2oKUGNjUlRxU3ZXNTFwYVozckJ0bnQ2QUg1TUVTREZiZjArMXNFQ1lRUDBhcnlNUVBEVHdDNXdTZnYyYU1rT3o5MApCZi9lYUIyOHVWa0tZeEVJdTMyQjJEclZqcG1mZldFNWpTS3JnQnlDYldoc1EyZ2c3ckFDbDJ3Z0VYNHJna0hNCml3NGhjYk13eHY1M1daaVZTaytnS2c2SzhWQVcwVjM3dU9SKzdOcktTYXZzTU9wald1Qk9GNlo5azZCSXZQbFIKNnUyd0ZubStKbHZwUHE2dnB5enR0ZnpLdlYvb1E4TSt2a2FjWTduenFpaEtNZmtYamhKdUQ4MVpVck5ONnhGKwp2ZEdaVW5TOS9jbjJjeTR3OHdtSmYvdk5WbEd2c2UvY0RaWFJzUGQ4Mk1NZkVKV1NGbkFsb1JoVHE0Qng2bE9yCnVkQnpJTk9ySm5jRkhvK0NINEZpSW0vNFd2ditSazg0djNGWGpuY1F2K3lSOXJaaE9GaWh6cUJTNGNIR1A2Q2gKRHJNTitYc3NrMTdsN0JqVHEzVGprTUlKMUVhTHlucXJyZUFRelJoR1pBR2VuaVZ2ekJJVTFvSUt1eFE4c0JmaQp5dGU1dHNYSmF6QVR0Z2k2bkY2aDJ1RFJkam8vZFp2VDd0d0VmWHQ3WER2OFIrbXQ2eDhIRnc3dk0zZGZyc3B1ClJvL2t1L1V2K0xrQ0RRUmo1K3gzQVJBQXppRXRTZDZ5MkJIOXhHais4WXpEcVZ4SzdmK2R4L1RUYldHUG9xc00KeVFERFJybUNUME1wN1hpcVhzUnVsRUJmajFMdS90aTRlUU0vb2tNUlljaS9IMW1HdldaVEt4ZHJNcWNjM0xQOQpRdlRkRnFsMkdIMVhtZFlLdnBtMGJNYTRZNWEyNU55c1hScDVMMXd0dFJsQUI5dWJVM0sycVppUFEwMjFZcmoxCm5hMjdqaW9hemFHTG9XelVxZ2JFaWVzb09LWGwvamFLQUpWZm5qZjA5OXdVUWtTN3d3TFVFWFZCeWJaekpsL3oKeVRLTnlUaG9NKzNOeGVQMzZCRzJWZERibzN2a2RXNWk2UGZOSmlxTmxGbTBOQVlzTHg5RWlSa3ZyWUFuOE0rbwpQazI1eno4ODNRMWZUSERZTlNoazhYL1BIWjlwbVlrWkFwaTdFUHFVbW1hZHd1eFgwTGJOY2lvWHV5dTEwOWtWCnY4VmhwaTVrRExpNUdETXVSZ1FrWmhxMTJVampsK3FkRUdhKzFHMWRiVWtZNzg4L3cwWnZzK21hSWZzd25TZncKbUV2bEw3MlNKdy96eHI4WDBpZ0Y5RDdpZS96K01BVWVMaDZacnA3SEVTV29JdVVxSGp6clF4ejhHemF2YndKRgpGRTNQZGIwTzV5U3hZRkF0Q2NITTJobmRZb0VOeVNpMFA5ZFlkeUNLNWZIemk2eXFBRFR0VEdXd3ZEM2F1RE83Ci8xM0hleGlZbWVzUXdXUnBzUG5IR2ducUhrVmo5MWkrZ0wwcGZWdVdLWW50ZWltUVhoUGlISmxIR1RDc0dmeE4KR3VZeTlwcXRvd1ZIYmNBSUFDNkxqWXIrYzFpQWlwTnFadjN5bThmZGx5Z0M5My9XdE1Sd2JpVzl6Y1JDdFFPNwpmbzhBRVFFQUFZa0NOZ1FZQVFnQUlCWWhCTkY4Z0h0QlZsV0JNNkg3aER4MFlVYyt0M205QlFKajUreDNBaHNNCkFBb0pFRHgwWVVjK3QzbTlEcjRRQU5jNFpyY0pKVTk0QzJJRHpzTTcxZS9oeGRrZTIvT1h4L3BpQWZJWlEyc28KUXhKSmt5Vzl5Q1czRkl1MWtJZGdoZ281OFpxTnpENVRNWTBMaEJHc3pNb1dES0praUZNZWVMdlhEY2w0TWY3UgpsV1E2NHJmczMyOS9QU2NvS2VINWFYamtQamVUNllWVENYV0xIMU5lUVp2TC9RbHhVQkVXeTlOZS9oenhJTTVFCkRUcFJWWWNmQWF0cDNFZkpRa1kxSCtyck1aaVB3ZXBLSXUrdXFucitRTU5tM3pmQjNoTWNtMEhGWFYrbDJ1SzEKNHJZRkFobjNDbm5JTE9QcWEwaHI5YlJZWmhTTjR6VVF5czZkSitrREcxeC93Q0VYSTlvcm5ucFpwcEpMaFlwNQpkQ1JsNXhXU0ZiV01RV21DZWt0N2FYakc1ZjFvb3kvT3EvWTcyQSsvWlVRelMyelNwS1czZHJiclNuMVlzV1o4CmFyTEVjRHc1dS93aWZRRVZjMmxZcndRb0czNHBnaGNsTlU4Z3dpMERXMmIxbENDVmJwa2hveHJDdHN5MXRDZ0MKeTlhUzVTM1ZPM2Qwazc2a2I0cVJobEYwcTcvS3l0K2taZjhWanpxVHJFZDdlYzBxY3RFeFZtS1JhMVBQdG55RApIUkhsNEs0ME11QjNyOXIyVm4xVnRHK3hHZDVsYmlxY3UzdEFkZytCK25QNzV5STl5OVI2NnFmRUs3TkdTTEdWClZmVkZIa3pLKzUrcENzbFdmaHEzM0IvMG1OdWZuMWJtMC9JMW9zSmJGOHUzdjljQUFwYlpCV3NTWW9ZUVdlVjkKVlg0V2FKcHZOVlViajBhcmszaUprRUJyMXlEeGNxcUxiTkJtMXdJaUMyL2s0N1VXci82OEs0SjUxQkFRV3RGSwo9c0VEQQotLS0tLUVORCBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCg==
  search:
    backend: ${BACKEND_CONFIG:dynamodb}
    elasticsearch:
      host: ${BACKEND_ELASTICSEARCH_HOST:localhost:9200}
      user: ${BACKEND_ELASTICSEARCH_USER}
      password: ${BACKEND_ELASTICSEARCH_PASSWORD}
    azure:
      master-key: ${BACKEND_AZURE_MASTER_KEY:C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==}
      endpoint: ${BACKEND_AZURE_ENDPOINT:https://localhost:8081}
  storage:
    backend: ${STORAGE_CONFIG:s3}
    access:
      session-duration: ${STORAGE_ACCESS_SESSION_DURATION:5}
    azure:
      blobConnectionString: ${AZURE_BLOB_CONNECTION_STRING:DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;}
      containerName: ${AZURE_BLOB_CONTAINER_NAME:tf-registry}
    s3:
      bucket:
        name: ${S3_STORAGE_BUCKET_NAME:tf-registry}
        region: ${S3_STORAGE_BUCKET_REGION:eu-central-1}

mp:
  openapi:
    extensions:
      smallrye:
        info:
          title: Tapir API
          version: ${registry.version}
          description: API for Tapir
          contact:
            name: Tapir @ Github
            url: https://github.com/PacoVK/tapir
          license:
            name: Apache 2.0
            url: http://www.apache.org/licenses/LICENSE-2.0.html

quarkus:
  banner:
    enabled: true
    path: banner.txt
  quinoa:
    enable-spa-routing: true
  sts:
    devservices:
      enabled: false
  oidc:
    logout:
      path: "/logout"
    token:
      refresh-token-time-skew: 5M
      refresh-expired: true
    enabled: true
    roles:
      source: ${registry.auth.role-source}
    token-state-manager:
      split-tokens: true
    application-type: web_app
    auth-server-url: ${registry.auth.endpoint}
    client-id: ${registry.auth.client-id}
    credentials:
      secret: ${registry.auth.client-secret}
    authentication:
      id-token-required: false
    token-path: ${registry.auth.token-path}
    end-session-path: ${registry.auth.end-session-path}
    authorization-path: ${registry.auth.auth-path}
    provider: ${registry.auth.provider}
  s3:
    aws:
      region: ${registry.storage.s3.bucket.region}
  elasticsearch:
    hosts: ${registry.search.elasticsearch.host}
    username: ${registry.search.elasticsearch.user}
    password: ${registry.search.elasticsearch.password}
  http:
    auth:
      permission:
        default:
          policy: authenticated
          paths: /*
        default-api:
          policy: permit
          paths:
            - /terraform/*
            # this is the path used for the local storage backend
            - /tapir/storage/*
            - /.well-known/*
        publish:
          policy: publish
          paths: /terraform/*
          methods: POST
      basic: false
      policy:
        publish:
          roles-allowed: publisher
    limits:
      max-body-size: ${API_MAX_BODY_SIZE:100M}
    filter:
      others:
        header:
          Cache-Control: no-cache
        matches: /.*
        methods: GET
        order: 0
      static:
        header:
          Cache-Control: max-age=31536000
        matches: /static/.+
        methods: GET
        order: 1
    proxy:
      proxy-address-forwarding: ${registry.proxy.enabled}
      allow-forwarded: true
      enable-forwarded-host: ${registry.proxy.enabled}
      forwarded-host-header: ${registry.proxy.forwarded-header}
    cors:
      origins: ${registry.cors.origins}
      methods: "*"
      headers: "*"

"%dev":
   registry:
    hostname: "127.0.0.1"
    port: 8443
   quarkus:
     dynamodb:
       endpoint-override: http://localhost:4566
       aws:
         credentials:
           type: static
           static-provider:
             access-key-id: test
             secret-access-key: test
             session-token: test
         region: eu-central-1
     s3:
       endpoint-override: http://localhost:4566
       path-style-access: true
     quinoa:
       dev-server:
         port: 3000
     http:
       cors:
         origins: "*"
         methods: "*"
         headers: "*"
         access-control-allow-credentials: true
       ssl:
         certificate:
           files: "./dev/certs/cert.pem"
           key-files: "./dev/certs/key.pem"

"%test":
  registry:
    hostname: "127.0.0.1"
    port: 8443
  quarkus:
    dynamodb:
      endpoint-override: http://localhost:4566
      aws:
        credentials:
          type: static
          static-provider:
            access-key-id: test
            secret-access-key: test
            session-token: test
        region: eu-central-1
    s3:
      endpoint-override: http://localhost:4566
      path-style-access: true